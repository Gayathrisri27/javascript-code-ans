<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MegaCart Shopping Application</title>
    <style>
        /* Reset some default styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f4f6f9;
            color: #333;
            font-size: 16px;
        }

        .header {
            background-color: #2c3e50;
            color: white;
            padding: 20px 0;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            font-size: 2.5rem;
        }

        .nav {
            display: flex;
            justify-content: center;
            background-color: #34495e;
            padding: 10px 0;
        }

        .nav-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            margin: 0 5px;
            transition: background-color 0.3s ease;
        }

        .nav-button:hover {
            background-color: #2980b9;
        }

        .container {
            max-width: 1200px;
            margin: 40px auto;
            padding: 20px;
        }

        .auth-container {
            max-width: 400px;
            margin: 40px auto;
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            margin-top: 5px;
        }

        .submit-button {
            width: 100%;
            padding: 12px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease;
        }

        .submit-button:hover {
            background-color: #27ae60;
        }

        .error-message, .success-message {
            font-size: 0.9rem;
            margin-top: 10px;
        }

        .error-message {
            color: #e74c3c;
        }

        .success-message {
            color: #2ecc71;
        }

        /* Product Grid Styles */
        .product-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .product-card {
            background-color: #fff;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .product-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        }

        .product-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 8px;
        }

        .product-details {
            text-align: center;
            margin-top: 10px;
        }

        .product-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
        }

        .product-price {
            font-size: 1.4rem;
            color: #e74c3c;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .cart-container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            margin-top: 30px;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            border-bottom: 1px solid #eee;
        }

        .cart-item:last-child {
            border-bottom: none;
        }

        .cart-item h3 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
        }

        .cart-item p {
            color: #555;
        }

        .cart-total {
            margin-top: 20px;
            font-size: 1.5rem;
            font-weight: 600;
            text-align: right;
            color: #333;
        }

        .section {
            display: none;
        }

        .section.active {
            display: block;
        }
    </style>
</head>
<body>

    <!-- Header -->
    <header class="header">
        <h1>MegaCart Shopping</h1>
    </header>

    <!-- Navbar -->
    <nav class="nav">
        <button class="nav-button" onclick="showSection('login')">Login</button>
        <button class="nav-button" onclick="showSection('signup')">Sign Up</button>
        <button class="nav-button" onclick="showSection('products')" id="products-nav" style="display: none;">Products</button>
        <button class="nav-button" onclick="showSection('cart')" id="cart-nav" style="display: none;">Cart</button>
        <button class="nav-button" onclick="logout()" id="logout-nav" style="display: none;">Logout</button>
    </nav>

    <div class="container">

        <!-- Login Section -->
        <section id="login" class="section active">
            <div class="auth-container">
                <h2>Login</h2>
                <form id="login-form" onsubmit="handleLogin(event)">
                    <div class="form-group">
                        <label for="login-username">Username</label>
                        <input type="text" id="login-username" required>
                    </div>
                    <div class="form-group">
                        <label for="login-password">Password</label>
                        <input type="password" id="login-password" required>
                    </div>
                    <button type="submit" class="submit-button">Login</button>
                    <div id="login-message"></div>
                </form>
            </div>
        </section>

        <!-- Signup Section -->
        <section id="signup" class="section">
            <div class="auth-container">
                <h2>Sign Up</h2>
                <form id="signup-form" onsubmit="handleSignup(event)">
                    <div class="form-group">
                        <label for="signup-username">Username</label>
                        <input type="text" id="signup-username" required>
                    </div>
                    <div class="form-group">
                        <label for="signup-password">Password</label>
                        <input type="password" id="signup-password" required>
                    </div>
                    <div class="form-group">
                        <label for="confirm-password">Confirm Password</label>
                        <input type="password" id="confirm-password" required>
                    </div>
                    <button type="submit" class="submit-button">Sign Up</button>
                    <div id="signup-message"></div>
                </form>
            </div>
        </section>

        <!-- Products Section -->
        <section id="products" class="section">
            <div class="product-grid" id="product-grid">
                <!-- Products will be dynamically added here -->
            </div>
        </section>

        <!-- Cart Section -->
        <section id="cart" class="section">
            <div class="cart-container">
                <h2>Shopping Cart</h2>
                <div id="cart-items"></div>
                <div id="cart-total" class="cart-total">Total: $0.00</div>
            </div>
        </section>

    </div>

    <script>
        // Product data
        const products = [
            { id: 1, name: "Product 1", price: 19.99, image: "https://via.placeholder.com/280x200" },
            { id: 2, name: "Product 2", price: 29.99, image: "https://via.placeholder.com/280x200" },
            { id: 3, name: "Product 3", price: 39.99, image: "https://via.placeholder.com/280x200" },
            { id: 4, name: "Product 4", price: 49.99, image: "https://via.placeholder.com/280x200" }
        ];

        // Default User Credentials
        const defaultUsername = 'user';
        const defaultPassword = 'pass';

        // Constants for username and password length validation
        const USERNAME_MIN_LENGTH = 3;
        const USERNAME_MAX_LENGTH = 15;
        const PASSWORD_MIN_LENGTH = 6;
        const PASSWORD_MAX_LENGTH = 20;

        // Initial Setup
        window.addEventListener('DOMContentLoaded', () => {
            const users = JSON.parse(localStorage.getItem('users')) || {};
            // Set default user
            if (!users[defaultUsername]) {
                users[defaultUsername] = defaultPassword;
                localStorage.setItem('users', JSON.stringify(users));
            }

            // Check if the user is already logged in
            const currentUser = localStorage.getItem('currentUser');
            if (currentUser) {
                updateNavigation(true);
                showSection('products');
                loadProducts();
            } else {
                localStorage.setItem('currentUser', defaultUsername);
                updateNavigation(true);
                showSection('products');
                loadProducts();
            }
        });

        // Handle Login
        function handleLogin(event) {
            event.preventDefault();
            const username = document.getElementById('login-username').value;
            const password = document.getElementById('login-password').value;
            const messageElement = document.getElementById('login-message');

            const users = JSON.parse(localStorage.getItem('users')) || {};

            if (users[username] && users[username] === password) {
                messageElement.className = 'success-message';
                messageElement.textContent = 'Login successful!';
                localStorage.setItem('currentUser', username);
                updateNavigation(true);
                showSection('products');
                loadProducts();
            } else {
                messageElement.className = 'error-message';
                messageElement.textContent = 'Invalid username or password';
            }
        }

        // Handle Signup
        function handleSignup(event) {
            event.preventDefault();
            const username = document.getElementById('signup-username').value;
            const password = document.getElementById('signup-password').value;
            const confirmPassword = document.getElementById('confirm-password').value;
            const messageElement = document.getElementById('signup-message');

            // Validate username and password
            if (username.length < USERNAME_MIN_LENGTH || username.length > USERNAME_MAX_LENGTH) {
                messageElement.textContent = `Username should be between ${USERNAME_MIN_LENGTH} and ${USERNAME_MAX_LENGTH} characters.`;
                return;
            }

            if (password.length < PASSWORD_MIN_LENGTH || password.length > PASSWORD_MAX_LENGTH) {
                messageElement.textContent = `Password should be between ${PASSWORD_MIN_LENGTH} and ${PASSWORD_MAX_LENGTH} characters.`;
                return;
            }

            if (password !== confirmPassword) {
                messageElement.textContent = `Passwords do not match.`;
                return;
            }

            // Save the user to localStorage
            const users = JSON.parse(localStorage.getItem('users')) || {};
            if (users[username]) {
                messageElement.textContent = `Username already exists.`;
                return;
            }

            users[username] = password;
            localStorage.setItem('users', JSON.stringify(users));
            messageElement.textContent = `Account created successfully! You can now log in.`;
        }

        // Show specific section
        function showSection(sectionId) {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.remove('active');
            });
            document.getElementById(sectionId).classList.add('active');
        }

        // Update navigation bar visibility
        function updateNavigation(isLoggedIn) {
            document.getElementById('products-nav').style.display = isLoggedIn ? 'inline-block' : 'none';
            document.getElementById('cart-nav').style.display = isLoggedIn ? 'inline-block' : 'none';
            document.getElementById('logout-nav').style.display = isLoggedIn ? 'inline-block' : 'none';
        }

        // Log the user out
        function logout() {
            localStorage.removeItem('currentUser');
            updateNavigation(false);
            showSection('login');
        }

        // Load products into the product grid
        function loadProducts() {
            const productGrid = document.getElementById('product-grid');
            productGrid.innerHTML = '';
            products.forEach(product => {
                const productElement = document.createElement('div');
                productElement.className = 'product-card';
                productElement.innerHTML = `
                    <img src="${product.image}" alt="${product.name}" class="product-image">
                    <div class="product-details">
                        <h3 class="product-title">${product.name}</h3>
                        <p class="product-price">$${product.price.toFixed(2)}</p>
                        <button class="submit-button" onclick="addToCart(${product.id})">Add to Cart</button>
                    </div>
                `;
                productGrid.appendChild(productElement);
            });
        }

        // Add a product to the cart
        function addToCart(productId) {
            const currentUser = localStorage.getItem('currentUser');
            if (!currentUser) {
                alert('Please log in to add products to your cart.');
                return;
            }

            const cart = JSON.parse(localStorage.getItem(`cart_${currentUser}`)) || [];
            const product = products.find(p => p.id === productId);

            if (product) {
                cart.push(product);
                localStorage.setItem(`cart_${currentUser}`, JSON.stringify(cart));
                alert('Product added to cart!');
            }
        }

        // Update the cart view
        function updateCart() {
            const currentUser = localStorage.getItem('currentUser');
            const cartItems = document.getElementById('cart-items');
            const cartTotal = document.getElementById('cart-total');

            if (!currentUser) {
                cartItems.innerHTML = '<p>Please login to view cart</p>';
                return;
            }

            const cart = JSON.parse(localStorage.getItem(`cart_${currentUser}`)) || [];

            if (cart.length === 0) {
                cartItems.innerHTML = '<p>Your cart is empty</p>';
                cartTotal.textContent = 'Total: $0.00';
                return;
            }

            let total = 0;
            cartItems.innerHTML = '';

            cart.forEach((item, index) => {
                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <div>
                        <h3>${item.name}</h3>
                        <p>$${item.price.toFixed(2)}</p>
                    </div>
                    <button class="nav-button" onclick="removeFromCart(${index})">Remove</button>
                `;
                cartItems.appendChild(cartItem);
                total += item.price;
            });

            cartTotal.textContent = `Total: $${total.toFixed(2)}`;
        }

        // Remove item from cart
        function removeFromCart(index) {
            const currentUser = localStorage.getItem('currentUser');
            if (!currentUser) return;

            const cart = JSON.parse(localStorage.getItem(`cart_${currentUser}`)) || [];
            cart.splice(index, 1);
            localStorage.setItem(`cart_${currentUser}`, JSON.stringify(cart));
            updateCart();
        }
    </script>

</body>
</html>
